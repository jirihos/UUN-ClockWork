[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d537a249a96dc0df",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "76b8d7d23f0dfbb5",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "74d70de6eea550f9",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7790596fee7e9be",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1be85959efd6d9ef",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f18849d91eb5ebcb",
        "type": "mongodb",
        "hostname": "mongodb",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "clockwork-gateway",
        "name": ""
    },
    {
        "id": "8e8c38f3867a2f4b",
        "type": "ui_group",
        "name": "Keyboard events",
        "tab": "886cc25582355e06",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "886cc25582355e06",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f1c82a9f185287f0",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9e0481318c1e8033",
        "type": "ui_group",
        "name": "Stashed keyboard events",
        "tab": "886cc25582355e06",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": true,
        "className": ""
    },
    {
        "id": "fcc25c05bf681369",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3e5527040d40c85f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "af810a62dae6c015",
        "type": "ui_group",
        "name": "Update list of users DB gateway",
        "tab": "ac261bd52cf295e5",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ac261bd52cf295e5",
        "type": "ui_tab",
        "name": "List of users",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "24fc504cdf00f66a",
        "type": "ui_group",
        "name": "List of users",
        "tab": "ac261bd52cf295e5",
        "order": 1,
        "disp": true,
        "width": "11",
        "collapse": true,
        "className": ""
    },
    {
        "id": "c91332c0.50c11",
        "type": "ui_group",
        "name": "commands",
        "tab": "379a501f.53b59",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "379a501f.53b59",
        "type": "ui_tab",
        "name": "ui-table command",
        "icon": "fa-table",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "afda953f5c974e93",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "1be85959efd6d9ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "afb0369c1244ceda",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "a2e4e61e46401397",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "9d5824a429730b28"
            ]
        ]
    },
    {
        "id": "9d5824a429730b28",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "gateway/usb-dongle/nodes/get",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1be85959efd6d9ef",
        "x": 450,
        "y": 160,
        "wires": []
    },
    {
        "id": "6dcf6125abb8951b",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "f76371fcaec11ec0"
            ]
        ]
    },
    {
        "id": "f76371fcaec11ec0",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "gateway/usb-dongle/pairing-mode/start",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1be85959efd6d9ef",
        "x": 470,
        "y": 220,
        "wires": []
    },
    {
        "id": "a832de492bcbf595",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "09a0dbbfc06fe9fa"
            ]
        ]
    },
    {
        "id": "09a0dbbfc06fe9fa",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "gateway/usb-dongle/pairing-mode/stop",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1be85959efd6d9ef",
        "x": 470,
        "y": 280,
        "wires": []
    },
    {
        "id": "11ece0c0373003d5",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "dd03fc639e1179b3"
            ]
        ]
    },
    {
        "id": "dd03fc639e1179b3",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "gateway/usb-dongle/nodes/purge",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1be85959efd6d9ef",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "dbe17ea55b14a173",
        "type": "mongodb out",
        "z": "f6f2187d.f17ca8",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "test",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 460,
        "y": 500,
        "wires": []
    },
    {
        "id": "f4d9976a02551019",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"foo\":\"bar\"}",
        "payloadType": "json",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "dbe17ea55b14a173"
            ]
        ]
    },
    {
        "id": "7ecfbdc3ca34f211",
        "type": "file in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "filename": "/run/secrets/terminal_api_key",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 340,
        "y": 680,
        "wires": [
            [
                "a5d844aacdfdd2ac"
            ]
        ]
    },
    {
        "id": "cda5acc378081260",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "On start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "7ecfbdc3ca34f211"
            ]
        ]
    },
    {
        "id": "a5d844aacdfdd2ac",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "api_key",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "dbb98daa7c298a05",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "e08953d02ae6cb07"
            ]
        ]
    },
    {
        "id": "1abbe845999c9e55",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 740,
        "wires": []
    },
    {
        "id": "e08953d02ae6cb07",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "api_key",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 740,
        "wires": [
            [
                "1abbe845999c9e55"
            ]
        ]
    },
    {
        "id": "0e63ea1d3b6cab68",
        "type": "mqtt in",
        "z": "d537a249a96dc0df",
        "name": "",
        "topic": "node/code-terminal:0/user",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "1be85959efd6d9ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "94a2c8b60c41d056"
            ]
        ]
    },
    {
        "id": "94a2c8b60c41d056",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Filter msg === 5 ",
        "func": "if (typeof msg.payload === 'string' && msg.payload.length ===5){\n    return [msg, null]; // Send first output\n} else {\n    return [null, msg]; // Send second output\n    \n}\n    ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "7e09073d61ddc699"
            ],
            [
                "404fcafe15a83f94"
            ]
        ]
    },
    {
        "id": "7e09073d61ddc699",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "set msg.payload ",
        "func": "let payloadString = msg.payload.toString();\n\nlet user = parseInt(payloadString.substring(0, 4));\nlet action = payloadString.substring(4);\nlet actionName;\n\nswitch (action) {\n    case 'A':\n        actionName = 'arrival';\n        break;\n    case 'L':\n        actionName = 'leave';\n        break;\n     case 'D':\n        actionName = 'doctor';\n        break;\n        case 'H':\n        actionName = 'holiday';\n        break;    \n    default:\n        actionName = 'unknown';\n}\n\nmsg.payload = \n{\n    \"terminalId\": \"12345605692d59ee\",\n    \"timestamp\": new Date().toISOString(),\n    \"employeeCode\": user,\n    \"type\": actionName\n};\n\nmsg.headers = {};\nmsg.headers['authorization'] = '10';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            [
                "c205155a2f3932fe"
            ]
        ]
    },
    {
        "id": "0c47445f94556a8b",
        "type": "mongodb out",
        "z": "d537a249a96dc0df",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "stashedKeyboardEventsCollection",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 700,
        "y": 440,
        "wires": []
    },
    {
        "id": "2f8352811aacfd89",
        "type": "http request",
        "z": "d537a249a96dc0df",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://host.docker.internal:3000/api/event/create",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "d6f9f320f897c6ee"
            ]
        ]
    },
    {
        "id": "d6f9f320f897c6ee",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "response 200.1, 400.2, 401.3, else.4.",
        "func": "if (msg.statusCode === 200) { // ok\n    return [msg, null, null, null];\n\n} else if (msg.statusCode === 400) { // bad request\n    return [null, msg, null, null];\n   \n} else if (msg.statusCode === 401) { // access denied\n    return [null, null, msg, null];\n\n} else { // error\n    return [null, null, null, msg];\n};\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 300,
        "wires": [
            [
                "7a6dc751a7fc8632"
            ],
            [
                "4eec8e00cae7f1e3",
                "b8f6b606e4f9ec5b"
            ],
            [
                "0997bfee7e0ad6f1"
            ],
            [
                "99940b665d510255"
            ]
        ]
    },
    {
        "id": "c205155a2f3932fe",
        "type": "change",
        "z": "d537a249a96dc0df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 120,
        "wires": [
            [
                "2f8352811aacfd89"
            ]
        ]
    },
    {
        "id": "99940b665d510255",
        "type": "change",
        "z": "d537a249a96dc0df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "56a5f23fd3add7a3",
                "0c47445f94556a8b",
                "60d9f8fe0958cf50"
            ]
        ]
    },
    {
        "id": "7a6dc751a7fc8632",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Log server response 200",
        "func": "msg.payload = {\n    \"timestamp\": msg.payload.error._original.timestamp,\n    \"employeeCode\": msg.payload.error._original.employeeCode,\n    \"type\": msg.payload.error._original.type,\n    \"update\": \"OK 200\",\n    \"msg\": msg.payload\n};\n\nnode.warn(\"USER LOGGED OK\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 240,
        "wires": [
            [
                "8d92076ea8ee2d84"
            ]
        ]
    },
    {
        "id": "8d92076ea8ee2d84",
        "type": "mongodb out",
        "z": "d537a249a96dc0df",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "keyboardEventsCollection",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "4eec8e00cae7f1e3",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Log server response 400",
        "func": "msg.payload = {\n    \"timestamp\": msg.payload.error._original.timestamp,\n    \"employeeCode\": msg.payload.error._original.employeeCode,\n    \"type\": msg.payload.error._original.type,\n    \"update\": \"Error 400\",\n    \"msg\": msg.payload\n};\n\nnode.warn(\"ERROR BAD REQUEST\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "8d92076ea8ee2d84"
            ]
        ]
    },
    {
        "id": "0997bfee7e0ad6f1",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Log server response 401",
        "func": "msg.payload = {\n    \"timestamp\": msg.payload.error._original.timestamp,\n    \"employeeCode\": msg.payload.error._original.employeeCode,\n    \"type\": msg.payload.error._original.type,\n    \"update\": \"Access denied 401\",\n    \"msg\": msg.payload\n};\n\nnode.warn(\"USER LOGGED ACCESS DENIED\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "8d92076ea8ee2d84"
            ]
        ]
    },
    {
        "id": "56a5f23fd3add7a3",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Log server response Err",
        "func": "let payloadString = msg.payload.toString();\n\nmsg.payload = {\n    \"timestamp\": msg.payload.timestamp,\n    \"employeeCode\": msg.payload.employeeCode,\n    \"type\": msg.payload.type,\n    \"update\": \"Connection error\",  \n};\n\nnode.warn(\"CONNECTION ERROR\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            [
                "8d92076ea8ee2d84"
            ]
        ]
    },
    {
        "id": "b8f6b606e4f9ec5b",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Log server response 400",
        "func": "msg.payload = {\n    \"timestamp\": msg.payload.error._original.timestamp,\n    \"employeeCode\": msg.payload.error._original.employeeCode,\n    \"type\": msg.payload.error._original.type,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 500,
        "wires": [
            [
                "0c47445f94556a8b",
                "60d9f8fe0958cf50"
            ]
        ]
    },
    {
        "id": "a93ea25313b7dcf7",
        "type": "comment",
        "z": "d537a249a96dc0df",
        "name": "Recive ID+action from keyboard",
        "info": "",
        "x": 170,
        "y": 20,
        "wires": []
    },
    {
        "id": "c886763ff525e7f5",
        "type": "mongodb in",
        "z": "d537a249a96dc0df",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "usersCollection",
        "operation": "find",
        "x": 900,
        "y": 560,
        "wires": [
            [
                "80888cdaf5d9a8b9",
                "41409294c2ebe3b5"
            ]
        ]
    },
    {
        "id": "60d9f8fe0958cf50",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "find in usersCollection id",
        "func": "var employeeCode = msg.payload.employeeCode\n\nvar findMsg = {\n    collection: \"usersCollection\", // Collection name\n    action: \"find\",\n    payload: {\n        'payload.id': employeeCode,\n    }\n};\n\nnode.send(findMsg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 560,
        "wires": [
            [
                "c886763ff525e7f5"
            ]
        ]
    },
    {
        "id": "80888cdaf5d9a8b9",
        "type": "function",
        "z": "d537a249a96dc0df",
        "name": "Is in usersCollection user with id ?",
        "func": "if (msg.payload.length === 0) {\n    node.warn(\"User not found\"); \n    msg = { payload: {\n         message: \"USER NOT FOUND LOCALLY ACCESS DENIED\"\n    } \n    }\n    return [ msg, null ];\n} else {\n    node.warn(\"User found\");\n    msg = { payload: {\n         message: \"USER FOUND LOCALLY OK\"\n    } \n    }\n    return [ null, msg ];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 640,
        "wires": [
            [
                "a369ae9174888f4b",
                "a90667a04de81245"
            ],
            [
                "a369ae9174888f4b",
                "6cfb1baa922fad99"
            ]
        ]
    },
    {
        "id": "a369ae9174888f4b",
        "type": "change",
        "z": "d537a249a96dc0df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 700,
        "wires": [
            [
                "f88db32ba06e4406"
            ]
        ]
    },
    {
        "id": "f88db32ba06e4406",
        "type": "debug",
        "z": "d537a249a96dc0df",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 760,
        "wires": []
    },
    {
        "id": "9c99398c78e5f781",
        "type": "comment",
        "z": "d537a249a96dc0df",
        "name": "Sort response",
        "info": "",
        "x": 130,
        "y": 240,
        "wires": []
    },
    {
        "id": "9bbcaccf8168057c",
        "type": "comment",
        "z": "d537a249a96dc0df",
        "name": "Response message to keyboardEventsCollection",
        "info": "",
        "x": 640,
        "y": 200,
        "wires": []
    },
    {
        "id": "0de411870f1f233a",
        "type": "comment",
        "z": "d537a249a96dc0df",
        "name": "No access to server check entry locally",
        "info": "",
        "x": 210,
        "y": 400,
        "wires": []
    },
    {
        "id": "cd2332bc79b74a0c",
        "type": "comment",
        "z": "d537a249a96dc0df",
        "name": "Check if user is in usersCollection database",
        "info": "",
        "x": 630,
        "y": 520,
        "wires": []
    },
    {
        "id": "997d10c9c55e4269",
        "type": "comment",
        "z": "d537a249a96dc0df",
        "name": "Save entry to POST it to server later",
        "info": "",
        "x": 600,
        "y": 400,
        "wires": []
    },
    {
        "id": "404fcafe15a83f94",
        "type": "ui_toast",
        "z": "d537a249a96dc0df",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "Wrong entry",
        "name": "Wrong entry",
        "x": 630,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4be098b25860ece8",
        "type": "ui_toast",
        "z": "d537a249a96dc0df",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "payload.message",
        "name": "\"USER CHECKED LOCALLY ACCESS DENIED\"",
        "x": 1210,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "12593b8dc90ac2cd",
        "type": "ui_toast",
        "z": "d537a249a96dc0df",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "payload.message",
        "name": "USER CHECKED LOCALLY OK",
        "x": 1150,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a90667a04de81245",
        "type": "change",
        "z": "d537a249a96dc0df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 620,
        "wires": [
            [
                "4be098b25860ece8"
            ]
        ]
    },
    {
        "id": "6cfb1baa922fad99",
        "type": "change",
        "z": "d537a249a96dc0df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 660,
        "wires": [
            [
                "12593b8dc90ac2cd"
            ]
        ]
    },
    {
        "id": "41409294c2ebe3b5",
        "type": "debug",
        "z": "d537a249a96dc0df",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 560,
        "wires": []
    },
    {
        "id": "810f708507612442",
        "type": "inject",
        "z": "76b8d7d23f0dfbb5",
        "name": "Every 10 min get list of users",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "c68bf099a6769c18"
            ]
        ]
    },
    {
        "id": "c20bc9ccb77a24e8",
        "type": "http request",
        "z": "76b8d7d23f0dfbb5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://host.docker.internal:8080/api/getLists",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "authorization",
                "valueType": "other",
                "valueValue": "1"
            }
        ],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "9e354968b2f4414e",
                "b29a6bef20b63c72"
            ]
        ]
    },
    {
        "id": "9e354968b2f4414e",
        "type": "function",
        "z": "76b8d7d23f0dfbb5",
        "name": "response 200 1. out, else 2.",
        "func": "if (msg.statusCode === 200){\n    return [msg, null]; // Send first output\n} else {\n    return [null, msg]; // Send second output\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "437c8c3a30167bbc",
                "a7a28555fa3fc0ad"
            ],
            [
                "f6d6d05d984eee08"
            ]
        ]
    },
    {
        "id": "8dddd2cf652c6554",
        "type": "comment",
        "z": "76b8d7d23f0dfbb5",
        "name": "Get/ Update list of users into local DB ",
        "info": "",
        "x": 170,
        "y": 20,
        "wires": []
    },
    {
        "id": "e6c2bdfd3eba38d2",
        "type": "mongodb out",
        "z": "76b8d7d23f0dfbb5",
        "mongodb": "f18849d91eb5ebcb",
        "name": "Remove list",
        "collection": "usersCollection",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "delete",
        "x": 1210,
        "y": 80,
        "wires": []
    },
    {
        "id": "437c8c3a30167bbc",
        "type": "function",
        "z": "76b8d7d23f0dfbb5",
        "name": "add users each to collection",
        "func": "msg.users = JSON.parse(msg.payload);\n\nvar deleteMsg = {\n    collection: \"usersCollection\", // Collection name\n    action: \"remove\",\n    payload: {}\n};\nnode.send(deleteMsg);\n\n\nif (msg.users && Array.isArray(msg.users)) {\n    for (var i = 0; i < msg.users.length; i++) {\n        var user = msg.users[i];\n\n        // Insert user\n        var insertMsg = {\n            collection: \"usersCollection\", // Collection name\n            payload: user\n        };\n\n        node.send(insertMsg);\n    }\n} else {\n    node.error(\"Invalid users array.\");\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [
            [
                "6fbc632079c8a472",
                "e6c2bdfd3eba38d2"
            ]
        ]
    },
    {
        "id": "6fbc632079c8a472",
        "type": "mongodb out",
        "z": "76b8d7d23f0dfbb5",
        "mongodb": "f18849d91eb5ebcb",
        "name": "Insert users",
        "collection": "usersCollection",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "a7a28555fa3fc0ad",
        "type": "function",
        "z": "76b8d7d23f0dfbb5",
        "name": "Log user list update SUCESS",
        "func": "msg.payload = {\n    \"timestamp\": new Date().toISOString(),\n    \"update\": \"SUCCESFULL\",\n    \"msg\": \"OK\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 200,
        "wires": [
            [
                "20b10770f9327a5d"
            ]
        ]
    },
    {
        "id": "20b10770f9327a5d",
        "type": "mongodb out",
        "z": "76b8d7d23f0dfbb5",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "userListUpdateCollection",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 1330,
        "y": 220,
        "wires": []
    },
    {
        "id": "e999598846c02a95",
        "type": "comment",
        "z": "76b8d7d23f0dfbb5",
        "name": "Replace DB (todo, object)",
        "info": "",
        "x": 950,
        "y": 60,
        "wires": []
    },
    {
        "id": "a2c1c9d92c1b0756",
        "type": "comment",
        "z": "76b8d7d23f0dfbb5",
        "name": "Log response",
        "info": "",
        "x": 890,
        "y": 160,
        "wires": []
    },
    {
        "id": "c4c3270d4232f020",
        "type": "ui_button",
        "z": "76b8d7d23f0dfbb5",
        "name": "",
        "group": "af810a62dae6c015",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "GET LIST OF USERS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "c20bc9ccb77a24e8",
                "02bf3d654cefb710",
                "8383109a01c9660c"
            ]
        ]
    },
    {
        "id": "c68bf099a6769c18",
        "type": "ui_button",
        "z": "76b8d7d23f0dfbb5",
        "name": "",
        "group": "24fc504cdf00f66a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "GET LIST OF USERS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "c4c3270d4232f020"
            ]
        ]
    },
    {
        "id": "996b8d311bcda11f",
        "type": "ui_table",
        "z": "76b8d7d23f0dfbb5",
        "group": "af810a62dae6c015",
        "name": "Update list of users DB gateway",
        "order": 0,
        "width": "14",
        "height": "10",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "update",
                "title": "Update statuss",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "msg",
                "title": "Message",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "8383109a01c9660c",
        "type": "mongodb in",
        "z": "76b8d7d23f0dfbb5",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "userListUpdateCollection",
        "operation": "aggregate",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "996b8d311bcda11f",
                "fe4883d317199546"
            ]
        ]
    },
    {
        "id": "f04185034d3a2345",
        "type": "comment",
        "z": "76b8d7d23f0dfbb5",
        "name": "Display log of user DB update UI",
        "info": "",
        "x": 170,
        "y": 300,
        "wires": []
    },
    {
        "id": "42382caa7092aea9",
        "type": "ui_table",
        "z": "76b8d7d23f0dfbb5",
        "group": "24fc504cdf00f66a",
        "name": "List of users in gateway DB",
        "order": 0,
        "width": "11",
        "height": "10",
        "columns": [
            {
                "field": "payload.id",
                "title": "Employee ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.surname",
                "title": "Surname",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.name",
                "title": "Name",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.department",
                "title": "Department",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1020,
        "y": 360,
        "wires": []
    },
    {
        "id": "02bf3d654cefb710",
        "type": "mongodb in",
        "z": "76b8d7d23f0dfbb5",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "usersCollection",
        "operation": "aggregate",
        "x": 600,
        "y": 360,
        "wires": [
            [
                "42382caa7092aea9"
            ]
        ]
    },
    {
        "id": "fe4883d317199546",
        "type": "debug",
        "z": "76b8d7d23f0dfbb5",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 480,
        "wires": []
    },
    {
        "id": "a35ddb1cb45ecaee",
        "type": "inject",
        "z": "76b8d7d23f0dfbb5",
        "name": "Refresh Dashboard every 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "02bf3d654cefb710",
                "8383109a01c9660c"
            ]
        ]
    },
    {
        "id": "3ea5fb05032f3c8c",
        "type": "comment",
        "z": "76b8d7d23f0dfbb5",
        "name": "Display log of usersCollection update",
        "info": "",
        "x": 1040,
        "y": 400,
        "wires": []
    },
    {
        "id": "6f6c2e4c6ab55fc0",
        "type": "comment",
        "z": "76b8d7d23f0dfbb5",
        "name": "Display List of users ",
        "info": "",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "f6d6d05d984eee08",
        "type": "function",
        "z": "76b8d7d23f0dfbb5",
        "name": "Log user list update FAIL",
        "func": "msg.payload = {\n    \"timestamp\": new Date().toISOString(),\n    \"update\": \"NOT SUCCESFULL\",\n    \"msg\": msg.payload\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 240,
        "wires": [
            [
                "20b10770f9327a5d",
                "3fb904db9d25c02b"
            ]
        ]
    },
    {
        "id": "3fb904db9d25c02b",
        "type": "debug",
        "z": "76b8d7d23f0dfbb5",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 280,
        "wires": []
    },
    {
        "id": "b29a6bef20b63c72",
        "type": "debug",
        "z": "76b8d7d23f0dfbb5",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "8d822c1ec888b9e2",
        "type": "ui_table",
        "z": "74d70de6eea550f9",
        "group": "9e0481318c1e8033",
        "name": "Stashed keyboard events",
        "order": 0,
        "width": "13",
        "height": "10",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "employeeCode",
                "title": "Employee ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Action",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1210,
        "y": 120,
        "wires": []
    },
    {
        "id": "cbf7c6584f0a9148",
        "type": "inject",
        "z": "74d70de6eea550f9",
        "name": "Refresh Table 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "05d406bbbd07e06b"
            ]
        ]
    },
    {
        "id": "05d406bbbd07e06b",
        "type": "ui_button",
        "z": "74d70de6eea550f9",
        "name": "",
        "group": "9e0481318c1e8033",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh todo",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "ed6e78e62f6e89b8"
            ]
        ]
    },
    {
        "id": "ed6e78e62f6e89b8",
        "type": "mongodb in",
        "z": "74d70de6eea550f9",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "stashedKeyboardEventsCollection",
        "operation": "find",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "8d822c1ec888b9e2"
            ]
        ]
    },
    {
        "id": "02d7e1010cac7ef5",
        "type": "comment",
        "z": "74d70de6eea550f9",
        "name": "Display keyboard events log (flow2) UI",
        "info": "",
        "x": 230,
        "y": 80,
        "wires": []
    },
    {
        "id": "036929e57912cc50",
        "type": "comment",
        "z": "74d70de6eea550f9",
        "name": "Display server response log(flow2) UI",
        "info": "",
        "x": 230,
        "y": 160,
        "wires": []
    },
    {
        "id": "2bd43a2954daefc6",
        "type": "inject",
        "z": "74d70de6eea550f9",
        "name": "Refresh Table 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "2daa2cbfa085b484"
            ]
        ]
    },
    {
        "id": "2daa2cbfa085b484",
        "type": "ui_button",
        "z": "74d70de6eea550f9",
        "name": "",
        "group": "8e8c38f3867a2f4b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh todo",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "10186ab8cec6d099"
            ]
        ]
    },
    {
        "id": "10186ab8cec6d099",
        "type": "mongodb in",
        "z": "74d70de6eea550f9",
        "mongodb": "f18849d91eb5ebcb",
        "name": "",
        "collection": "keyboardEventsCollection",
        "operation": "find",
        "x": 730,
        "y": 200,
        "wires": [
            [
                "4e566a1b02d91ecd"
            ]
        ]
    },
    {
        "id": "4e566a1b02d91ecd",
        "type": "ui_table",
        "z": "74d70de6eea550f9",
        "group": "8e8c38f3867a2f4b",
        "name": "Keyboard events",
        "order": 2,
        "width": "13",
        "height": "10",
        "columns": [
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "employeeCode",
                "title": "Employee ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Action",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "update",
                "title": "Server response",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1110,
        "y": 200,
        "wires": []
    },
    {
        "id": "f17ae95c73b4bc0e",
        "type": "debug",
        "z": "74d70de6eea550f9",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 120,
        "wires": []
    },
    {
        "id": "511ccb281833db51",
        "type": "comment",
        "z": "d7790596fee7e9be",
        "name": "POST stashed events from keyboard",
        "info": "",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "abcc11f42d635328",
        "type": "http request",
        "z": "d7790596fee7e9be",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://host.docker.internal:3000/api/event/create",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f3e31cca429dc6a2",
        "type": "inject",
        "z": "d7790596fee7e9be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "807ba165fd557106",
        "type": "function",
        "z": "d7790596fee7e9be",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            []
        ]
    }
]